var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Introduction","text":"<p>Flutter + Back4app Based</p>"},{"location":"index.html#multi-purpose-classified-mobile-app","title":"Multi-purpose Classified Mobile App.","text":"<ul> <li>Built with Flutter 3.22.2</li> <li>Available for iOS and Android</li> </ul> <p>Buy from Codecanyon Read Documentation</p>"},{"location":"additional-notes.html","title":"Additional notes","text":""},{"location":"additional-notes.html#static-string","title":"Static string","text":"<p>For static strings we have user localization. To add a new static string or replace any value, go to the file <code>/locales/en-US.json</code>. To add a new string, write a new key and set the string as its value. You can replace a key\u2019s value to replace an existing string. Now run the command:</p> <pre><code>flutter pub run easy_localization:generate \\-S \"/locales\" \\-O \"lib/locales\" \\-o \"locale_keys.g.dart\" \\-f keys\n</code></pre> <p>This will generate a variable inside the file <code>lib/locales/locale_keys.g.dart</code>. In the app, use these generated variables to display a static string.</p>"},{"location":"additional-notes.html#public","title":"public","text":"<p>For asset paths, we are using <code>flutter_gen_runner</code>. To activate this package, run these commands on the project\u2019s terminal:</p> <pre><code>dart pub global activate flutter_gen\nflutter packages pub run build_runner build\n</code></pre> <p>If you previously ran the 2nd command, next time use this command to avoid conflict:</p> <pre><code>flutter packages pub run build_runner build \\--delete-conflicting-outputs\n</code></pre> <p>These commands will generate a file <code>lib/gen/public.gen.dart</code> and you can use these generated variables for public.</p>"},{"location":"build-admin-app.html","title":"Build the Admin App","text":""},{"location":"build-admin-app.html#build-the-admin-app-for-android","title":"Build the Admin App for Android","text":"<ol> <li>Open the terminal in the Android studio. Run the command <code>flutter clean</code>.</li> </ol> <ol> <li>Run the command <code>flutter pub get</code>.</li> </ol> <ol> <li>Make sure you have added <code>google-services.json</code> file to the project as described in the previous step. You can find the <code>google-services.json</code> file on Firebase console.</li> </ol> <p>Now the code is ready to run. Let\u2019s hit the run button in the Android studio and our Admin app should run on the connected Android device or emulator.</p>"},{"location":"build-admin-app.html#build-the-admin-app-for-ios","title":"Build the Admin App for iOS","text":"<p>To build the customer app for iOS, we need to follow the next steps. It is to mention that, to build the app for iOS, you must need a Mac PC running at least Mac OS Ventura running XCode 13 or higher.</p> <ol> <li>Repeat the step 1 and 2 from building the app for Android described in the previous section, i,e run this 2 commands in the terminal within the project directory.</li> </ol> <pre><code>   flutter clean\n   flutter pub get\n</code></pre> <ol> <li>Open the project folder in finder and you\u2019ll see an iOS folder there. Open that folder and it should look like the following image.</li> </ol> <p></p> <ol> <li>Double-click on <code>Runner.xcworkspace</code> file and it opens up the project in XCode.</li> <li>Now, let\u2019s go to our browser to the Firebase Console and open our firebase app. Now we need to go to the project settings like the Android app process in the previous section.</li> </ol> <p>Now click on \u201cAdd App\u201d button and fill up the information as requested.</p> <p></p> <ol> <li>In the above image, we need to put the apple bundle ID. We\u2019ll find that in XCode in the General tab, the field we are looking for is <code>Bundle Identifier</code> like the image. Copy that and paste into the form at step 4. In the app nickname, add the app name you have set. And download the config file called GoogleService-info.plist and add that file to the iOS project.</li> <li>To do that, right click on Runner in XCode and select <code>Add files to Runner</code> and select the <code>GoogleService-info.plist</code> downloaded previously. Make sure, this file and <code>info.plist</code> file remains in the same directory like the image below.</li> </ol> <p></p> <ol> <li>Now, in the terminal, run the following command.</li> </ol> <pre><code>cd iOS\npod install\n</code></pre> <p>Make sure you have cocoapods installed in your Mac. If you don\u2019t have cocoapods, you can use the following link to install that. Cocoapods Installation</p> <ol> <li>let\u2019s run the app in XCode. App should build and run in the simulator.</li> </ol>"},{"location":"build-android-app.html","title":"Build the Customer App for Android","text":"<ol> <li>Open the terminal in the Android studio. Run the command - <code>flutter clean</code>.</li> </ol> <ol> <li>Run the command - <code>flutter pub get</code>.</li> </ol> <ol> <li>Make sure you have added <code>google-services.json</code> file to the project as described in the previous step. You can find the <code>google-services.json</code> file on Firebase console.</li> </ol> <p>Now the code is ready to run. Let\u2019s hit the run button in the Android studio and our Admin app should run on the connected Android device or emulator.</p>"},{"location":"build-ios-app.html","title":"Build the Customer App for iOS","text":"<p>To build the customer app for iOS, we need to follow the next steps. It is to mention that, to build the app for iOS, you must need a Mac PC running at least Mac OS Ventura running XCode 13 or higher.</p> <ol> <li>Repeat the step 1 and 2 from building the app for Android described in the previous section, i,e run this 2 commands in the terminal within the project directory.</li> </ol> <pre><code>   flutter clean\n   flutter pub get\n</code></pre> <ol> <li>Open the project folder in finder and you\u2019ll see an iOS folder there. Open that folder and it should look like the following image.</li> </ol> <p></p> <ol> <li>Double-click on <code>Runner.xcworkspace</code> file and it opens up the project in XCode.</li> <li>Now, let\u2019s go to our browser to the Firebase Console and open our firebase app. Now we need to go to the project settings like the Android app process in the previous section.</li> </ol> <p>Now click on \u201cAdd App\u201d button and fill up the information as requested.</p> <p></p> <ol> <li>In the above image, we need to put the apple bundle ID. We\u2019ll find that in XCode in the General tab, the field we are looking for is <code>Bundle Identifier</code> like the image. Copy that and paste into the form at step 4. In the app nickname, add the app name you have set. And download the config file called GoogleService-info.plist and add that file to the iOS project.</li> <li>To do that, right click on Runner in XCode and select <code>Add files to Runner</code> and select the <code>GoogleService-info.plist</code> downloaded previously. Make sure, this file and <code>info.plist</code> file remains in the same directory like the image below.</li> </ol> <p></p> <ol> <li>Now, in the terminal, run the following command.</li> </ol> <pre><code>cd iOS\npod install\n</code></pre> <p>Make sure you have cocoapods installed in your Mac. If you don\u2019t have cocoapods, you can use the following link to install that. Cocoapods Installation</p> <ol> <li>let\u2019s run the app in XCode. App should build and run in the simulator.</li> </ol>"},{"location":"change-app-icon-splash-screen-branding.html","title":"Update App Icon and Splash Screen of the Apps","text":""},{"location":"change-app-icon-splash-screen-branding.html#changing-app-icon","title":"Changing App Icon","text":"<p>This guide will help you change the app icon of Towntrade Customer App and Towntrade Admin App using the <code>flutter_launcher_icons</code> package (version 0.13.1).</p>"},{"location":"change-app-icon-splash-screen-branding.html#step-1-adding-images-to-public","title":"Step 1: Adding Images to public","text":"<p>First, add or replace the new image you want to use as your app icon. For example, you might place it inside the <code>/images/</code> folder:</p> <ul> <li>For iOS: Recommended icon size is 1024x1024 pixels.</li> <li>For Android: Recommended icon size is 512x512 pixels.</li> </ul> <p></p>"},{"location":"change-app-icon-splash-screen-branding.html#step-2-update-the-path-in-pubspecyaml","title":"Step 2: Update the Path in <code>pubspec.yaml</code>","text":"<p>Next, update the <code>pubspec.yaml</code> file to point to the new image path.</p> <ul> <li>If you want to use same images for iOS and Android:   Open <code>pubspec.yaml</code> and locate the <code>flutter_icons</code> section. Change the <code>image_path</code> to the path of the new image:</li> </ul> <p></p> <ul> <li>If you want to use different images for iOS and Android, you can specify separate paths for each:</li> </ul> <pre><code>flutter_icons:\n  android: true\n  ios: true\n  android_icon: \"/images/android_app_icon.png\"\n  ios_icon: \"/images/ios_app_icon.png\"\n</code></pre>"},{"location":"change-app-icon-splash-screen-branding.html#step-3-regenerate-the-app-icons","title":"Step 3: Regenerate the App Icons","text":"<p>After updating the pubspec.yaml file, regenerate the app icons by running the following command:</p> <pre><code>flutter pub run flutter_launcher_icons:main\n</code></pre>"},{"location":"change-app-icon-splash-screen-branding.html#changing-splash-screen","title":"Changing Splash Screen","text":"<p>This guide walks you through the steps to set up and customize a splash screen in your app using the <code>flutter_native_splash</code> package.</p>"},{"location":"change-app-icon-splash-screen-branding.html#step-1-adding-images-to-public_1","title":"Step 1: Adding Images to public","text":"<p>First, add or replace the new image you want to use as your Splash Screen. For example, you might place it inside the <code>/images/</code> folder.Ensure that the image is correctly named and saved in the appropriate folder. It is recommended that the image is in PNG format for better compatibility.</p> <p></p>"},{"location":"change-app-icon-splash-screen-branding.html#step-2-update-the-splash-screen-configuration","title":"Step 2: Update the Splash Screen Configuration","text":"<p>Next, update the flutter_native_splash configuration in your pubspec.yaml file to point to the new splash image.</p> <p>In the pubspec.yaml, locate the flutter_native_splash section and change the image field to point to the new splash image path:</p> <p></p>"},{"location":"change-app-icon-splash-screen-branding.html#step-3-regenerate-the-splash-screen","title":"Step 3: Regenerate the Splash Screen","text":"<p>After updating the image path in your configuration, regenerate the splash screen by running the following command:</p> <pre><code>flutter pub run flutter_native_splash:create\n</code></pre>"},{"location":"changelog.html","title":"Change Logs","text":""},{"location":"changing-graphical-assets.html","title":"Changing Graphical public in the Project","text":"<p>This guide explains how to update and manage graphical public, such as images, icons.</p>"},{"location":"changing-graphical-assets.html#update-in-app-images","title":"Update In-App Images","text":"<ul> <li>Place your new images in the /images/ or /icon/ directory , Or you can create new directory. Make sure the directory structure is organized as needed.</li> <li>Ensure that the new images are registered in the pubspec.yaml file.</li> </ul> <ul> <li>After registered the image regenerate the public by running the following command:</li> </ul> <pre><code>dart run build_runner build\n</code></pre>"},{"location":"changing-graphical-assets.html#view-images","title":"View Images","text":"<p>you can view image by use ImageViewComponent.</p> <ul> <li>Update your image path.</li> <li>If use svg image from public, set isLocalSvg: true and isLocalAsset: true,</li> <li>If use png/jpg/jpeg image from public, set isLocalAsset: true.</li> <li>If use network image,isLocalAsset: false,</li> </ul> <p></p>"},{"location":"changing-themes-colors.html","title":"Changing Themes and Colors of The Apps","text":"<p>This guide walks you through the steps of customizing the themes and colors of your app. Here you can globally set colors, fonts, and other design properties for a consistent look across your app.</p>"},{"location":"changing-themes-colors.html#step-1-define-a-theme-in-themedata","title":"Step 1: Define a Theme in <code>themeData</code>","text":"<p>Flutter\u2019s <code>ThemeData</code> class allows you to define global styles for your app. You can customize various properties like the primary color, accent color, typography, and more.</p>"},{"location":"changing-themes-colors.html#example-basic-theme","title":"Example Basic Theme","text":"<p>In the <code>MaterialApp</code> widget, you can set a <code>theme</code> parameter with a <code>ThemeData</code> instance:</p> <p></p> <p>This sets the basic app colors like the primary color, accent color, and font family, which will be applied globally throughout your app.</p>"},{"location":"changing-themes-colors.html#update-colors-in-styledart","title":"Update Colors in <code>style.dart</code>","text":"<p>If you want to update the theme's colors, you can do so in a centralized file like <code>style.dart</code>, which is used to manage the app's color scheme. This approach allows for easier maintenance and consistency across your app.</p>"},{"location":"changing-themes-colors.html#example-of-updating-colors","title":"Example of Updating Colors","text":"<ul> <li>Define Colors in <code>style.dart</code></li> </ul> <p>First, define your colors in <code>style.dart</code>. For instance, you can change the primary color and accent color by updating their HEX color values:</p> <p></p>"},{"location":"configure-admin-app.html","title":"Configure The Admin App","text":"<p>Let\u2019s open the towntrade-admin project from our bundle with Android Studio. Since we have already done the necessary setup for Flutter and Android, it should detect the flutter project and start indexing the files and other things.</p> <p>To make the Towntrade customer app functional, we need to build and configure the Towntrade-Admin app first. This admin app lets the product owner configure a lot of things like Product Categories, Sub-categories, Service Locations, and lots of other things. If these are not configured, then the customer app users will not be able to use the app smoothly and may not see any data.</p> <p>So, we'll prepare the Towntrade Admin app in the following sections:</p>"},{"location":"configure-admin-app.html#rename-the-app-package-name","title":"Rename the App &amp; Package Name","text":""},{"location":"configure-admin-app.html#connect-the-admin-app-with-the-firebase-project","title":"Connect the Admin App with the Firebase Project","text":""},{"location":"configure-admin-app.html#enable-firebase-cloud-messaging-or-push-notification","title":"Enable Firebase Cloud Messaging or Push Notification","text":""},{"location":"configure-admin-app.html#connect-the-customer-app-to-back4app","title":"Connect The Customer App to Back4App","text":""},{"location":"configure-admin-app.html#build-the-admin-app","title":"Build the Admin App","text":""},{"location":"configure-admin-app.html#additional-notes","title":"Additional Notes","text":""},{"location":"configure-admin-app.html#important-note-for-the-admin-app","title":"Important Note for the Admin App","text":"<p>It is recommended to set up the <code>SUPER_ADMIN</code> profile before starting the USER app.</p> <p>Your Back4App parse backend table initially does not have an admin. So we have written the admin app this way so that it finds if there is any <code>SUPER_ADMIN</code> in the parse table already. Please note that it searches for <code>SUPER_ADMIN</code>. Not ADMIN or any other role.</p> <p>If there is no <code>SUPER_ADMIN</code> in the table, The admin app will navigate you to the screen where you will be able to set up a <code>SUPER_ADMIN</code>. If <code>SUPER_ADMIN</code> is registered, you will never be navigated to this screen ever again. Now you can log in to the admin app using the <code>SUPER_ADMIN</code> credentials. <code>SUPER_ADMIN</code> can create new ADMINs.</p>"},{"location":"configure-customer-app.html","title":"Configure The Customer App","text":"<p>Let\u2019s open the <code>towntrade</code> project from our bundle with Android Studio. Since we have already done the necessary setup for Flutter and Android, it should detect the flutter project and start indexing the files and other things.</p> <p>To make the Towntrade customer app functional, It\u2019s necessary to build and configure the Towntrade-Admin app first. Since we have completed that process in the previous section, we can assume that the product owner has already configured the required app data like Product Categories, Subcategories, Service Locations, and lots of other things. If these are not configured, then the customer app users will not be able to use the app.</p> <p>We'll discuss the process in the following pages sequentially:</p>"},{"location":"configure-customer-app.html#rename-the-app-package-name","title":"Rename the App &amp; Package Name","text":""},{"location":"configure-customer-app.html#connect-the-app-with-the-firebase-project","title":"Connect the App with the Firebase Project","text":""},{"location":"configure-customer-app.html#enable-firebase-cloud-messaging-or-push-notification","title":"Enable Firebase Cloud Messaging or Push Notification","text":""},{"location":"configure-customer-app.html#connect-the-customer-app-to-back4app","title":"Connect The Customer App to Back4App","text":""},{"location":"configure-customer-app.html#build-the-customer-app-for-android","title":"Build the Customer App for Android","text":""},{"location":"configure-customer-app.html#build-the-customer-app-for-ios","title":"Build the Customer App for iOS","text":""},{"location":"configure-customer-app.html#push-notification-in-ios","title":"Push Notification in iOS","text":""},{"location":"configure-customer-app.html#additional-notes","title":"Additional Notes","text":""},{"location":"connect-admin-app-firebase.html","title":"Connect the Admin App with the Firebase Project","text":"<p>Previously we have created a firebase project in the Firebase console. Now, we need to connect our Customer app with this project. In order to do that, we need to do the following steps.</p>"},{"location":"connect-admin-app-firebase.html#connect-android-app-to-firebase-project","title":"Connect Android App to Firebase Project","text":"<ol> <li>Click on the Gear Icon to the right of \u2018Project Overview\u2019 in the left menu. It will open a menu, click on the project settings. The project settings page will open up.</li> <li>In the General tab, navigate to the bottom. Click on the Android icon. It opens up a form like the image.</li> </ol> <ol> <li>In the Android package name, enter the package name that you have chosen while renaming the package. You can also find it in android \u2192 app \u2192 build.gradle file. Copy the applicationId and paste it to the firebase form on step 2.</li> <li>Also, set the App Nickname, use the same name that you have chosen in the project renaming part.</li> <li>At this point, it will provide us a google-services.json file. Let\u2019s download that file and put it in the android \u2192 app directory within the project. See the following image as reference.</li> <li>Since our codebase already has a empty <code>google-services.json</code> file in place, so you can just copy the contents of your 'google-services.json' file and paste it in the existing file.</li> </ol>"},{"location":"connect-admin-app-firebase.html#connect-ios-app-to-firebase-project","title":"Connect iOS App to Firebase Project","text":"<p>You can skip this part for now if you want. You can come back here later when you configure and build the iOS version of the app as described here.</p> <p>Now, let\u2019s go to our browser to the Firebase Console and open our firebase app. Now we need to go to the project settings like the Android app process in the previous section.</p> <p>Now click on \u201cAdd App\u201d button and fill up the information as requested.</p> <p></p> <ol> <li>In the above image, we need to put the apple bundle ID. We\u2019ll find that in XCode in the General tab, the field we are looking for is \u201cBundle Identifier\u201d like the image. Copy that and paste into the form at step 4. In the app nickname, add the app name you have set. And download the config file called GoogleService-info.plist and add that file to the iOS project.</li> <li>To do that, right click on Runner in XCode and select \u2018Add files to Runner\u2019 and select the GoogleService-info.plist downloaded previously. Make sure, this file and info.plist file remains in the same directory like the image below.</li> </ol> <p></p>"},{"location":"connect-app-firebase.html","title":"Connect the Customer App with the Firebase Project","text":"<p>Previously we have created a firebase project in the Firebase console. Now, we need to connect our Customer app with this project. In order to do that, we need to do the following steps.</p>"},{"location":"connect-app-firebase.html#connect-android-app-to-firebase-project","title":"Connect Android App to Firebase Project","text":"<ol> <li>Click on the Gear Icon to the right of \u2018Project Overview\u2019 in the left menu. It will open a menu, click on the project settings. The project settings page will open up.</li> <li>In the General tab, navigate to the bottom. Click on the Android icon. It opens up a form like the image.</li> </ol> <ol> <li>In the Android package name, enter the package name that you have chosen while renaming the package. You can also find it in android \u2192 app \u2192 build.gradle file. Copy the applicationId and paste it to the firebase form on step 2.</li> <li>Also, set the App Nickname, use the same name that you have chosen in the project renaming part.</li> <li>At this point, it will provide us a google-services.json file. Let\u2019s download that file and put it in the android \u2192 app directory within the project. See the following image as reference.</li> <li>Since our codebase already has a empty <code>google-services.json</code> file in place, so you can just copy the contents of your 'google-services.json' file and paste it in the existing file.</li> </ol>"},{"location":"connect-app-firebase.html#connect-ios-app-to-firebase-project","title":"Connect iOS App to Firebase Project","text":"<p>You can skip this part for now if you want. You can come back here later when you configure and build the iOS version of the app as described here.</p> <p>Now, let\u2019s go to our browser to the Firebase Console and open our firebase app. Now we need to go to the project settings like the Android app process in the previous section.</p> <p>Now click on \u201cAdd App\u201d button and fill up the information as requested.</p> <p></p> <ol> <li>In the above image, we need to put the apple bundle ID. We\u2019ll find that in XCode in the General tab, the field we are looking for is \u201cBundle Identifier\u201d like the image. Copy that and paste into the form at step 4. In the app nickname, add the app name you have set. And download the config file called GoogleService-info.plist and add that file to the iOS project.</li> <li>To do that, right click on Runner in XCode and select \u2018Add files to Runner\u2019 and select the GoogleService-info.plist downloaded previously. Make sure, this file and info.plist file remains in the same directory like the image below.</li> </ol> <p></p>"},{"location":"connect-back4ap.html","title":"Connect The App to Back4App","text":"<p>In the Setup &amp; Configure Back4App Application, we have created an application and we got out ApplicationId and ClientKey. Now we need to copy both the applicationId and clientKey. And we Open the file lib/utils/constants.dart. Search for keyApplicationId, keyClientKey.</p> <p>Now, we need to replace the value of the variable keyApplicationId with the applicationId from the back4App console and replace the keyClientKey variable with the value of the clientKey.</p> <p></p>"},{"location":"directory-structure.html","title":"Directory Structure","text":""},{"location":"directory-structure.html#base","title":"Base","text":"<p>Contains base classes, app configurations like Loading, Handle error, Image Dialog, Empty Data Widget,Reset GetX Values etc.</p>"},{"location":"directory-structure.html#controllers","title":"Controllers","text":"<p>Stores controller files, potentially related to managing the state and logic of your views. This could indicate a separation of business logic from the UI.</p>"},{"location":"directory-structure.html#gen","title":"Gen","text":"<p>Contains generated image files.</p>"},{"location":"directory-structure.html#locales","title":"Locales","text":"<p>Contains generated language files.</p>"},{"location":"directory-structure.html#models","title":"Models","text":"<p>Data model are defined for easier data handling and manipulation.</p>"},{"location":"directory-structure.html#pages","title":"Pages","text":"<p>Contains all screens of the application.</p>"},{"location":"directory-structure.html#utils","title":"Utils","text":"<p>Contains all app utility functions like helper functions , theme utilities etc.</p>"},{"location":"directory-structure.html#widgets","title":"Widgets","text":"<p>Contains all UI widget used in the application like: Buttons, TextFields,AppBars,BottomSheet etc.</p>"},{"location":"directory-structure.html#firebaseoptions","title":"FirebaseOptions","text":"<p>Contains FirebaseOptions like: projectId, messagingSenderId, storageBucket etc.</p>"},{"location":"firebase-cloud-messaging.html","title":"Enable Firebase Cloud Messaging or Push Notification","text":"<p>Open the firebase console and go to Project Settings. Select Cloud Messaging and Check the Cloud Messaging API Legacy. If that\u2019s disabled, enable it from Google Cloud Console. When enabled, Click Add Server Key. Now we should be able to see the Server Key.</p> <p></p> <p>Open the file lib/utils/constants.dart. Search for firebaseAuthKey.Copy the Server Key from the previous step and set it to the value of firebaseAuthKey.</p> <p></p>"},{"location":"push-notification-ios.html","title":"Push Notification in iOS:","text":"<p>Push notification in iOS does not work in the iOS Simulator and it requires additional setup process that needs an apple developer account. If you have an apple developer account, you need to create an AppID and enable Push Notification capability there. You\u2019ll also need to create an APN Auth Key in the developer portal and upload that Auth key in your Firebase project. Detail information can be found here: https://firebase.google.com/docs/cloud-messaging/ios/client</p> <p>Finally, we have to enable Push Notification capability in the \u201cSigning &amp; Capabilities\u201d tab in XCode.</p> <p>Finally, it is to mention that, we don\u2019t have to make any change in our codebase. The above tasks in the apple developer portal is needed and Xcode needs to connect to your developer account for certificates, provisioning profiles etc.</p>"},{"location":"rename-app-and-package-name.html","title":"Rename the App &amp; Package Name","text":"<p>The first thing we need to do is to rename the App and its package name to match our business name.</p> <p>In the root directory of the project, there is a file called \u2018pubspec.yaml\u2019. Open the file in the Editor. You\u2019ll find a block like this at the bottom of the file:</p> <p></p> <p>If you want to build it for Android, you need to set <code>app_name</code> &amp; <code>package_name</code> in the android block. To build for iOS, you need the set all 3 fields <code>app_name</code>, <code>bundle_name</code> &amp; <code>package_name</code> that we see in the ios block. After updating the information, it should look like this.</p> <p></p> <p>Now, open the terminal in the root directory of the project within Android Studio and run the following command,</p> <pre><code>flutter pub run package_rename\n</code></pre> <p>If the command executes without any problem, the project should be renamed and ready to build. However, if we build the project now, it will show an error \u2018No matching client found for package name 'com.marketplace.app'\u2019. We\u2019ll solve this problem in the next section.</p>"},{"location":"setting-backendserver-database.html","title":"Setting Up the Backend Server &amp; Database","text":"<p>For the backend APIs and Database, we use Parse Platform in this project. It was initially a Facebook product and later it was made open source. So, if you are a developer and familiar with Node.js for server-side development, you can use the Open Source Parse-Server &amp; related applications &amp; host it in your preferred VPS server.</p> <p>However, we\u2019ll use a deployment-ready Parse server provided by Back4app.com. They provide everything we need to get started in no time. And we\u2019ll get a bunch of great tools as well to implement some features easily, we\u2019ll get a ready admin dashboard to manage our data and many other useful stuff.</p>"},{"location":"setting-backendserver-database.html#setup-configure-back4app-application","title":"Setup &amp; Configure Back4App Application","text":"<p>Go to the website: https://www.back4app.com/</p> <p></p> <p>Login to the console. If you don\u2019t have an account, sign up first. After login, you are on this page:</p> <p></p> <ol> <li>Click on the \u2018Build New App\u2019 Button</li> <li>Select Backend as a service</li> </ol> <p></p> <ol> <li>Set the name of your app, select NoSQL Database, and click on the Create button.</li> </ol> <p></p> <p>Now your parse console is prepared. To use this on your flutter code, you need an Application ID and Client key. To get these keys, select App Settings -&gt; Security &amp; Keys: Save it for now. We are going to need them in the coming steps.</p> <p></p>"},{"location":"setting-backendserver-database.html#setup-configure-firebase-console","title":"Setup &amp; Configure Firebase Console","text":"<p>We use Google Firebase for a couple of very useful features in this App. For example, verifying user phone numbers, sending push notifications, app analytics and several others. So, we need to connect Google Firebase with our project with the following steps. Let\u2019s open</p> <ul> <li>Open the Firebase console following this link: https://console.firebase.google.com/</li> <li>Click create a new project. Follow the instructions in the steps and finish the process. Enable Google Analytics in the process. It will take a minute to complete and when finished, Click continue and it will take you inside the Firebase project.</li> </ul> <p>We have more work to do here. We are going to come back to Firebase after changing a few important things in the codebase.</p>"},{"location":"starter-guide.html","title":"Starter Guide","text":""},{"location":"starter-guide.html#introduction-to-flutter","title":"Introduction to Flutter","text":"<p>Flutter is Google's UI toolkit for building beautiful, natively compiled applications for MOBILE, WEB, and DESKTOP from a single codebase. It\u2019s easy to learn and has been gaining increasing popularity. With this guide, you will learn the basics of Flutter and will be able to create a simple application using this technology.</p> <p>Click here to learn more about Flutter.</p>"},{"location":"starter-guide.html#tools-setup","title":"Tools &amp; Setup","text":""},{"location":"starter-guide.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Flutter &amp; Dart SDK (Flutter version 3.22.2 is recommended)</li> <li>An IDE (Android Studio recommended, Visual Studio Code, or IntelliJ IDEA)</li> </ul> <p>To edit this project, ensure that Flutter and Dart are installed and configured successfully on your machine.</p> <ol> <li>Set up your editor - Install the Flutter and Dart plugins.</li> <li>If you have the Android SDK installed and configured, follow the steps below to install Flutter.</li> </ol> <p>Complete Flutter installation guide</p>"},{"location":"starter-guide.html#android-studio-windows-setup","title":"Android Studio \u2013 Windows Setup","text":"<p>Here we'll know how to install Android Studio in a Windows machine.</p> <ul> <li>Download Android Studio</li> <li>Get the Flutter SDK</li> <li>Learn more about Android Studio</li> </ul>"},{"location":"starter-guide.html#step-1-get-the-flutter-sdk","title":"Step 1: Get the Flutter SDK","text":"<ol> <li>Download the installation bundle for the latest stable Flutter release.</li> <li>Extract the <code>.zip</code> file and place the <code>flutter</code> folder in your desired installation location (e.g., <code>C:\\src\\flutter</code>). Avoid directories that require elevated privileges, like <code>C:\\Program Files\\</code>.</li> </ol>"},{"location":"starter-guide.html#step-2-update-your-path","title":"Step 2: Update your PATH","text":"<p>To run Flutter commands from the regular Windows console:</p> <ol> <li>Search for \"env\" and select Edit environment variables.</li> <li>Under User variables, check if there's an entry for <code>Path</code>.<ul> <li>If it exists, append the full path to <code>flutter\\bin</code> using <code>;</code> as a separator.</li> <li>If not, create a new user variable named <code>Path</code> with the full path to <code>flutter\\bin</code>.</li> </ul> </li> <li>Close and reopen any existing console windows to apply the changes.</li> </ol>"},{"location":"starter-guide.html#step-3-run-flutter-doctor","title":"Step 3: Run <code>flutter doctor</code>","text":"<p>From a console window with the Flutter directory in your PATH, run:</p> <pre><code>c:\\src\\flutter&gt;flutter doctor\n</code></pre> <p>This command checks for any platform dependencies you need to resolve. Learn more.</p>"},{"location":"starter-guide.html#android-studio-macos-setup","title":"Android Studio \u2013 macOS Setup","text":""},{"location":"starter-guide.html#download-and-install-required-software","title":"Download and Install Required Software","text":"<ul> <li>Download Android Studio</li> <li>Download Xcode</li> <li>Get the Flutter SDK</li> </ul>"},{"location":"starter-guide.html#step-1-get-the-flutter-sdk_1","title":"Step 1: Get the Flutter SDK","text":"<ol> <li>Download and extract the installation bundle to get the latest Flutter SDK.</li> <li>Move the extracted <code>flutter</code> folder to your desired location (e.g., <code>Documents/flutter</code>).</li> </ol>"},{"location":"starter-guide.html#step-2-update-your-path_1","title":"Step 2: Update Your PATH","text":"<p>To access Flutter commands from the terminal:</p> <p>For the current terminal window:</p> <pre><code>export PATH=\"$PATH:`pwd`/flutter/bin\"\n</code></pre>"},{"location":"starter-guide.html#to-set-the-path-permanently-on-macos","title":"To Set the PATH Permanently on macOS","text":"<ol> <li>Open or Create <code>.bash_profile</code></li> </ol> <p>Use the following command to open or create the <code>.bash_profile</code> file in your home directory:</p> <p><code>bash    sudo open -e $HOME/.bash_profile</code> 2. Append the PATH Export Line   Add the following line to the bottom of the <code>.bash_profile</code> file:</p> <p><code>bash    export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"</code>   Replace [PATH_TO_FLUTTER_GIT_DIRECTORY] with the actual path to your Flutter SDK directory 3. Refresh the PATH Variables   Apply the changes by refreshing the PATH variables:</p> <pre><code> source $HOME/.bash_profile\n  ```\n\n### Step 3: Verify the Setup `flutter doctor`\n\nRun flutter doctor to ensure that everything is set up correctly and Flutter is properly configured:\n\n```bash\nflutter doctor\n</code></pre> <p>If flutter doctor shows no issues, your setup is complete!</p>"},{"location":"starter-guide.html#android-studio-linux-setup","title":"Android Studio \u2013 Linux Setup","text":""},{"location":"starter-guide.html#download-and-install-required-software_1","title":"Download and Install Required Software","text":"<ul> <li>Download Android Studio</li> <li>Learn more about Android Studio</li> <li>Get the Flutter SDK</li> </ul>"},{"location":"starter-guide.html#step-1-get-the-flutter-sdk_2","title":"Step 1: Get the Flutter SDK","text":"<ol> <li>Download the Flutter SDK</li> <li> <p>Visit the Flutter installation page and download the latest stable release.</p> </li> <li> <p>Extract the Downloaded File</p> </li> <li> <p>You can extract the <code>.tar.xz</code> file by double-clicking on it, or via terminal:      <pre><code>tar xf flutter_linux_x.x.x-stable.tar.xz\n</code></pre></p> </li> <li> <p>Move the Extracted Folder</p> </li> <li>Move the extracted <code>flutter</code> folder to your desired location (e.g., <code>Documents/flutter</code>).</li> </ol>"},{"location":"starter-guide.html#step-2-update-your-path_2","title":"Step 2: Update Your PATH","text":"<p>To access the Flutter command from the terminal, you'll need to update your PATH environment variable. You can choose to update it for the current terminal session only or permanently.</p>"},{"location":"starter-guide.html#option-1-update-path-for-current-session","title":"Option 1: Update PATH for Current Session","text":"<p>To temporarily add Flutter to your PATH: <pre><code>export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"\n</code></pre> This change will only last for the current terminal window.</p>"},{"location":"starter-guide.html#update-path-permanently-for-flutter-on-linux","title":"Update PATH Permanently for Flutter on Linux","text":""},{"location":"starter-guide.html#option-2-update-path-permanently","title":"Option 2: Update PATH Permanently","text":"<p>To ensure Flutter commands are accessible from any terminal session, you need to update the PATH environment variable permanently.</p>"},{"location":"starter-guide.html#open-your-shell-profile","title":"Open Your Shell Profile","text":"<ol> <li>Open a terminal.</li> <li>Edit your shell profile file (e.g., <code>.bashrc</code>, <code>.bash_profile</code>, <code>.zshrc</code>) using a text editor. For example, to edit <code>.bashrc</code>:    <pre><code>nano ~/.bashrc\n</code></pre></li> </ol>"},{"location":"starter-guide.html#add-flutter-to-path","title":"Add Flutter to PATH","text":""},{"location":"starter-guide.html#step-1-add-flutter-to-path","title":"Step 1: Add Flutter to PATH","text":"<ol> <li>Open Your Shell Profile</li> <li> <p>Open your shell profile file (e.g., <code>.bashrc</code>, <code>.bash_profile</code>, <code>.zshrc</code>) in a text editor:      <pre><code>nano ~/.bashrc\n</code></pre></p> </li> <li> <p>Add Flutter to PATH</p> </li> <li>Add the following line to the bottom of the file:      <pre><code>export PATH=\"$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin\"\n</code></pre>      Replace <code>[PATH_TO_FLUTTER_GIT_DIRECTORY]</code> with the actual path to your Flutter SDK.</li> </ol>"},{"location":"starter-guide.html#step-2-save-the-file-and-apply-the-changes","title":"Step 2: Save the File and Apply the Changes","text":"<ol> <li>Save the File</li> <li> <p>Save the file and exit the editor.</p> </li> <li> <p>Apply the Changes</p> </li> <li>Apply the changes by running:      <pre><code>source ~/.bashrc\n</code></pre></li> </ol>"},{"location":"starter-guide.html#step-3-verify-the-setup","title":"Step 3: Verify the Setup","text":"<ol> <li>Confirm PATH</li> <li> <p>Check that <code>flutter/bin</code> is in your PATH by running:      <pre><code>echo $PATH\n</code></pre></p> </li> <li> <p>Verify Flutter Command</p> </li> <li>Ensure the Flutter command is available by running:      <pre><code>flutter --version\n</code></pre></li> </ol> <p>If the <code>flutter</code> command runs successfully and displays the Flutter version, your setup is complete!</p>"},{"location":"technical-documentation.html","title":"TownTrade - Flutter + Back4App Multipurpose Classified Mobile App","text":""},{"location":"technical-documentation.html#technical-documentation","title":"Technical Documentation","text":"<p>TownTrade is a multipurpose classified mobile application built using Flutter. This documentation provides detailed guidance on setting up and configuring all necessary components for a smooth and efficient deployment of the app. Whether you're setting up the backend, configuring the admin panel, or customizing the customer-facing app, this documentation will walk you through every step of the process.</p> <p>This section covers how to set up the backend infrastructure using Back4App and Firebase. You'll learn how to configure the server, create and manage databases, and set up APIs for seamless communication between the backend and your Flutter app. Detailed instructions for connecting and managing data effectively will also be provided.</p> <p>The admin app is the control center for managing all aspects of TownTrade. This section explains how to install and configure the admin app, manage user roles and permissions, and customize the app to handle tasks like managing listings, moderating content, and overseeing user activity.</p> <p>The customer-facing app is the heart of TownTrade, providing users with a platform to browse, list, and manage classifieds. This section provides step-by-step instructions on setting up and customizing the customer app, improving the user interface, and enabling features like user registration, notifications, and payment integrations.</p>"},{"location":"technical-documentation.html#setting-up-the-backend-server-database","title":"Setting Up the Backend Server &amp; Database","text":""},{"location":"technical-documentation.html#configure-the-admin-app","title":"Configure The Admin App","text":""},{"location":"technical-documentation.html#configure-the-customer-app","title":"Configure The Customer App","text":""},{"location":"towntrade-overview.html","title":"Towntrade Overview","text":""},{"location":"towntrade-overview.html#introducing-towntrade-your-one-stop-classified-mobile-app","title":"Introducing \"TownTrade: Your One-Stop Classified Mobile App!\"","text":"<p>Are you tired of sifting through countless websites and apps just to buy or sell something? Do you wish there was a simpler way to connect with potential buyers and sellers in your area? Look no further! TownTrade is the ultimate solution for all your classified needs.</p>"},{"location":"towntrade-overview.html#where-towntrade-can-be-used","title":"Where TownTrade can be used?","text":"<ul> <li> <p>Retail and Consumer Goods: TownTrade can disrupt traditional retail by allowing users to buy and sell new or used consumer goods. From electronics and fashion to home appliances, users can find great deals within their local community.</p> </li> <li> <p>Real Estate: Users can list properties for sale or rent on TownTrade, making it a valuable platform for the real estate industry. It simplifies the process of finding homes, apartments, or commercial spaces in specific locations.</p> </li> <li> <p>Automotive: Sellers can list vehicles, from cars to motorcycles and boats, on TownTrade, making it a convenient platform for buying and selling automobiles. Users can search for vehicles in their area, reducing the need for extensive travel.</p> </li> <li> <p>Services:TownTrade can be used to find local service providers such as plumbers, electricians, tutors, or house cleaners. It enables individuals to connect with service providers in their vicinity.</p> </li> <li> <p>Jobs and Gig Economy: Users can post job listings or freelance services on TownTrade. This opens up opportunities for individuals to find local employment or freelance gigs, helping the gig economy thrive.</p> </li> <li> <p>Collectibles and Antiques: Collectors and antique enthusiasts can discover rare items within their community. TownTrade can become a go-to platform for finding and selling valuable collectibles.</p> </li> <li> <p>Food and Agriculture: Local farmers and food producers can use TownTrade to market their fresh produce, homemade products, or artisanal goods. Buyers can easily access locally sourced items.</p> </li> <li> <p>Furniture and Home Decor: Users can furnish their homes or redecorate by buying and selling furniture and home decor items on TownTrade. It's a cost-effective way to find unique pieces.</p> </li> <li> <p>Event and Ticketing: TownTrade can facilitate the buying and selling of event tickets, promoting local concerts, sports events, and cultural activities.</p> </li> <li> <p>Hobbies and Crafts: Crafters and hobbyists can showcase their handmade creations on TownTrade. Buyers interested in unique, locally made items can find one-of-a-kind products.</p> </li> <li> <p>Pet Services and Adoption: TownTrade can connect pet owners with services like pet grooming, boarding, and adoption services, contributing to the pet industry.</p> </li> <li> <p>Health and Wellness Services: Users can access local healthcare services, wellness products, and fitness equipment on TownTrade, promoting health and well-being.</p> </li> <li> <p>Local Art and Artists: Artists can sell their artwork and connect with local art enthusiasts, contributing to the growth of the local art scene.</p> </li> <li> <p>Education and Tutoring: TownTrade can be a platform for educators to offer tutoring services and educational materials to students in their area.</p> </li> <li> <p>Green and Sustainable Products: Promote eco-friendly and sustainable products and initiatives within a local community through TownTrade.</p> </li> </ul> <p>By venturing into these industries, TownTrade has the potential to revolutionize the way people buy and sell goods and services while strengthening local economies and communities.</p> <p></p>"},{"location":"towntrade-overview.html#towntrade-classified-mobile-app-features","title":"TownTrade Classified Mobile App Features","text":""},{"location":"towntrade-overview.html#customer-app-features","title":"Customer App Features","text":""},{"location":"towntrade-overview.html#login-page","title":"Login page","text":"<ol> <li>Welcome/Welcome back greetings from the app and instructions to log in</li> <li>Login with email option</li> <li>Password option</li> <li>Password validity message</li> <li>Forget password option</li> <li>If users click on the forget password option it will refer them to a page named get recovery password where there will be an option which will ask the user to enter email so that they can send the recover password instructions to the user email.</li> <li>Log in submission option</li> <li>Finally if the user is new there is a sign up option it will redirect the user    to the sign up page.</li> </ol>"},{"location":"towntrade-overview.html#sign-up-page","title":"Sign up page","text":"<ol> <li>Welcome greetings from the app</li> <li>Enter profile details i.e. name, email and password option</li> <li>Then in the next page, the user will be asked for his/her phone number.</li> <li>If the user already has an account there is a login option which will redirect the user to the login page.</li> <li>After entering continue next page will want an OTP from the user.</li> <li>Continue named submission option.</li> <li>If the user didn\u2019t get the code on time resend the code option.</li> </ol>"},{"location":"towntrade-overview.html#homepage","title":"Homepage","text":"<ol> <li>There is a profile picture icon on the top left side of the page which refers to the user as My Profile page.</li> <li>There is a filter icon which refers to the filter page where there is a price range from 0 to 10000. By applying the price range users can search the product in this price range.</li> <li>There is a location bar on the top of the page by setting the location user can find the nearby deals.</li> <li>Users can also change or update their location from the location bar to get the nearby deals.</li> <li>There is also a search bar beside the location bar to search the exciting product deals.</li> <li>There are a number of tabs including different categories of products like mobiles, electronics, vehicles, property, home &amp; living, pets &amp; animals. There is a tab option called All which includes all categories of product.</li> <li>If there are no appropriate deals nearby for the user there will appear a message that no deals found in the user's area.</li> <li>There is a message icon right beside the home icon which includes all the messages from the buyer (if i am using this app as a seller) also includes the messages from the seller (if i am using this app as a buyer).</li> <li>There is an additional icon beside the message icon which refers users to the Post A Deal page.</li> <li>There is a notification icon beside the additional icon which refers users to the notification page where the user can get the updates from the app.</li> <li>There is a settings icon beside the notification icon which will let the user change basic settings of the app.</li> </ol>"},{"location":"towntrade-overview.html#settings-page","title":"Settings page","text":"<ol> <li>There is a Settings icon beside the notification icon which includes the    notification on/off option where users can turn on or off the    notification from the app.</li> <li>Below that there is a Contact us option from where users can contact the    App developer company if users face any technical problem while using    the app or if they want to give their valuable feedback about the app.</li> <li>There is a log out option below the contact us option from where users    can log out from their profile.</li> </ol>"},{"location":"towntrade-overview.html#post-a-deal-page","title":"Post A Deal page","text":"<ol> <li>At top of the page there is a product name option.</li> <li>Below that it contains the product\u2019s description.</li> <li>There is a category option from where sellers can list their product under    a certain category. There is also a subcategory option which will be optional for the user.</li> <li>Below that there is a country bar option from where user can select the    country.</li> <li>There is a city option below the country and an area option under the city.</li> <li>There is a price option from where the user can enter the desired price in    what price he/she will sell the product.</li> <li>Below that there is a quantity option where the user can enter the    quantity of the product.</li> <li>Below the quantity bar there is an option called upload picture from    where maximum of 3 images can be uploaded at a time and without an    image the user can\u2019t proceed to post the product for sell.</li> <li>There is a post option bar below the image uploading option for the    submission of the post.</li> </ol>"},{"location":"towntrade-overview.html#my-profile-page","title":"My Profile page","text":"<ol> <li>It contains the profile information of registered user.</li> <li>The page contains profile picture of the user which can be updated    by the user anytime.</li> <li>The page contains the user name, user email and phone number.</li> <li>If the user listed anything for sell it will be enlisted below the profile in an option called deals by me. It will show the details about the product also.</li> <li>Users can mark the product as sold from the Mark as sold option. If the product is already sold or delete the product from the delete option.</li> <li>Users can also edit their name from the top right pen icon.</li> <li>Users can view the blocked users from View Blocked Users option.</li> </ol>"},{"location":"towntrade-overview.html#product-details-page","title":"Product Details page","text":"<ol> <li>If users click on the product which is listed on the Deals this will lead    them to the Product Details page which will contain the details about the    product.</li> <li>By entering the page the user will see there will be pictures (maximum 3    Pictures) of their desired product.</li> <li>Below the pictures of the product there is a section where it contains the    category of the product.</li> <li>Below the category it contains the price of the product.</li> <li>Then it contains an elaborate description about the product.</li> <li>There is a flag icon at the top right where the users can report the product    if they find any inappropriate product which violates the rules and regulations.</li> <li>The page contains the seller name (right beside it contains the seller    profile) and the location where the product is available.</li> <li>Below the page it contains two options called Chat with seller and Call    Seller through which buyers can contact with the seller.</li> </ol>"},{"location":"towntrade-overview.html#seller-profile-page","title":"Seller Profile page","text":"<ol> <li>By clicking the View profile beside the seller name of the Product Details page, users can visit the Seller\u2019s Profile page.</li> <li>The page contains a profile picture of the seller and a username of the seller.</li> <li>This page also contains an option to contact the seller like Chat    with seller &amp; Call Seller.</li> <li>The page also contains the deals (products that he listed for sell) by    the seller.</li> <li>There is a flag icon right top of the page from where the users can report the seller if he behaves or sells anything inappropriate.</li> <li>Beside the flag icon there is a red block icon from where the user can block the seller.</li> </ol>"},{"location":"towntrade-overview.html#messagechat-page","title":"Message/Chat page","text":"<ol> <li>Chat with seller option leads the user to the Message/Chat page along with the desired product\u2019s picture.</li> <li>From this page users can send messages to seller for buying their desired product.</li> <li>Users can also go to Message/Chat page by clicking on the letter icon right beside the home icon. Here, all the messages sent by sellers or buyers will be enlisted. Users can click any of them and read the messages.</li> </ol>"},{"location":"towntrade-overview.html#admin-app-features","title":"Admin App Features","text":""},{"location":"towntrade-overview.html#login-page_1","title":"Login page","text":"<ol> <li>Welcome/Welcome back greetings from the app and instructions to log in. Here only super admin can login initially. Inside the app, if the super admin adds any other admin manually, then that admin can later login using the provided email and password.</li> <li>Login with email option</li> <li>Password option</li> <li>Password validity message</li> <li>Forget password option</li> <li>If super admin/admin click on the forget password option it will refer him/her to a page    named get recovery password where there will be an option which will    ask the super admin/admin to enter email so that they can send the recover password    instructions to the user email.</li> <li>Log in submission option</li> </ol>"},{"location":"towntrade-overview.html#dashboard","title":"Dashboard","text":"<ol> <li> <p>After login, dashboard screen will appear. Here, the admin can view a summary of users (admins, customers and banned users), deals (total deals posted, total sold deals and total reported deals), service locations(countries, cities and areas) and categories and subcategories.</p> </li> <li> <p>There is a hamburger menu on top left corner of the dashboard page.</p> </li> <li>In the hamburger menu, the name, email and role name of the logged-in admin will be shown. The other options include Users, Admins, Service Location, Reports, Categories and Logout.</li> </ol>"},{"location":"towntrade-overview.html#users-page","title":"Users Page","text":"<ol> <li>In the Users option from the hamburger menu, the admin can see the list of customers using the app.</li> <li>Inside every user\u2019s profile, there will be user\u2019s profile picture, deals posted by the user.</li> <li>There will also be a Ban User option at the top right corner of the page using which the admin can ban any user if they are breaking any rules.</li> </ol>"},{"location":"towntrade-overview.html#admins-page","title":"Admins Page","text":"<ol> <li>In the Admins option from the hamburger menu, the admin/super admin can view the list of admins with their corresponding email address.</li> <li>Inside every admin\u2019s profile, their profile details will be shown.</li> <li>Super admin can add new admins from this Admins page. In order to do that, the name, email, phone number and a password will be needed.</li> </ol>"},{"location":"towntrade-overview.html#service-location-page","title":"Service Location Page","text":"<ol> <li>In the Service Location option from the hamburger menu, the list of countries where the app can be used will be shown.</li> <li>The super admin can add a new country by the Add option from the top right corner of the page.</li> <li>In the Add Country page, name of the country, currency of that country and country flag picture will be needed to be uploaded.</li> <li>Add Country submission option</li> </ol>"},{"location":"towntrade-overview.html#reports","title":"Reports","text":"<ol> <li>In the Reports option from the hamburger menu, there will be the list of reports submitted by the customers through the customer app.</li> <li>The admin can view the reported products list in this page.</li> <li>The admin can take an action through the Take Action button which will let them remove the deal from the customer app. Once removed, the admin can again publish it anytime using the Take Action button.</li> <li>The admin can click on any product to view the product details page. From the product details page, the admin can also view the seller\u2019s profile details as well.</li> </ol>"},{"location":"towntrade-overview.html#categories","title":"Categories","text":"<ol> <li>In the Categories option from the hamburger menu, the admin can view the list of categories already added by the admins/super admin.</li> <li>The admin can add new category using the Add option from the top right corner of the page. In order to do that, the category name will be needed.</li> <li>The admin can click on any existing category to view that category details with it\u2019s name and it\u2019s visibility option in the customer app. The admin can turn on or off the visibility anytime. Any changes made here need to be saved in order to appear on the customer app.</li> <li>The admin can manage subcategories from this page. Inside Manage Subcategories, there will be a list existing subcategories with an Add option.</li> <li>Inside Add option of the subcategory page, the name of the subcategory and the visibility of it in the customer app will be shown. The admin can turn on or off the visibility anytime. Any changes made here need to be saved in order to appear on the customer app.</li> </ol>"},{"location":"towntrade-overview.html#why-choose-towntrade-classified-mobile-application","title":"Why Choose TownTrade Classified Mobile Application?","text":"<ul> <li> <p>Seamless Buying and Selling: With TownTrade, you can wear both hats \u2013 be a seller and a buyer with ease. Whether you're looking to declutter your home or find that hidden gem, we've got you covered.</p> </li> <li> <p>Location-Based Deals: TownTrade's advanced location-based technology ensures that you can find deals or post listings for products in your area. No more sifting through irrelevant listings from far-flung places.</p> </li> <li> <p>AWide Range of Categories: From electronics and fashion to home decor and vehicles, TownTrade covers an extensive range of categories. Whatever you're looking for, you're sure to find it here.</p> </li> <li> <p>User-Friendly Interface: Our app boasts an intuitive and user-friendly interface, making it a breeze to post listings, browse products, and connect with buyers and sellers.</p> </li> <li> <p>Secure Transactions: Safety is our priority. We provide a secure platform for transactions and ensure the authenticity of users, so you can buy and sell with confidence.</p> </li> <li> <p>Chat &amp; Negotiate: Our in-app messaging feature lets you make a call or chat with potential buyers or sellers, negotiate prices, and ask questions about products, all in one convenient place.</p> </li> <li> <p>Smart Search: Looking for something specific? Our smart search feature makes it easy to find exactly what you're looking for, saving you time and effort.</p> </li> <li> <p>Real-Time Notifications: Stay updated on the latest listings and messages with real-time notifications. Never miss out on a great deal again!</p> </li> </ul>"},{"location":"towntrade-overview.html#frequently-asked-questions","title":"Frequently Asked Questions","text":"<p>Here are some frequently asked questions:</p>"},{"location":"towntrade-overview.html#how-do-users-download-towntrade","title":"How do users download TownTrade?","text":"<p>One can download TownTrade from your device's app store, whether it's the Apple App Store for iOS devices or the Google Play Store for Android devices.</p>"},{"location":"towntrade-overview.html#how-do-users-create-an-account-on-towntrade","title":"How do users create an account on TownTrade?","text":"<p>To create an account, users can simply download the app, open it, and follow the registration process. They can sign up using your email address.</p>"},{"location":"towntrade-overview.html#is-the-users-personal-information-safe-on-towntrade","title":"Is the user\u2019s personal information safe on TownTrade?","text":"<p>Yes, we take user privacy seriously. Your personal information is secure, and we have robust security measures in place to protect your data.</p>"},{"location":"towntrade-overview.html#can-users-use-towntrade-in-any-location","title":"Can users use TownTrade in any location?","text":"<p>Yes, TownTrade is designed for use in any location. Users can search for deals and post listings in your local area or any other location you choose.</p>"},{"location":"towntrade-overview.html#what-can-users-buy-or-sell-on-towntrade","title":"What can users buy or sell on TownTrade?","text":"<p>You can buy and sell a wide range of products on TownTrade, including electronics, clothing, furniture, vehicles, and more. If it's legal and safe, you can list it!</p>"},{"location":"towntrade-overview.html#how-can-users-contact-a-seller-or-buyer","title":"How can users contact a seller or buyer?","text":"<p>Users can contact other users through the in-app messaging system. They simply click on the listing they\u2019re interested in and send a message to the seller or buyer. They can also call the seller or the buyer if needed.</p>"},{"location":"towntrade-overview.html#can-users-negotiate-prices-on-towntrade","title":"Can users negotiate prices on TownTrade?","text":"<p>Yes, users can negotiate prices with other users through the messaging system. TownTrade encourages open communication between buyers and sellers.</p>"},{"location":"towntrade-overview.html#how-can-users-report-suspicious-activity-or-listings","title":"How can users report suspicious activity or listings?","text":"<p>Users can report or block any user if you find them suspicious for any reason. Users can also report any product by using the reporting feature within the app.</p>"},{"location":"towntrade-overview.html#are-there-any-restrictions-on-what-i-can-list-on-towntrade","title":"Are there any restrictions on what I can list on TownTrade?","text":"<p>While TownTrade is open to a wide range of products, there may be restrictions on illegal, dangerous, or prohibited items. Please review our guidelines for more information.</p>"},{"location":"towntrade-overview.html#is-there-any-other-question-on-your-mind","title":"Is there any other question on your mind?","text":"<p>Ask us now!</p>"},{"location":"towntrade-overview.html#credit","title":"Credit","text":"<p>Visual Resources: Unsplash</p>"}]}